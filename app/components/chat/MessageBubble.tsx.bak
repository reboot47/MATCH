"use client";

import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { formatDistanceToNow } from 'date-fns';
import { ja } from 'date-fns/locale';
import { Message, Reaction, MessageStatus } from '@/app/types/chat';
import { HiOutlineHeart, HiHeart, HiOutlineDotsHorizontal } from 'react-icons/hi';
import { FaCheck, FaCheckDouble } from 'react-icons/fa';
import { SafeImage, GiftImage, AvatarImage } from '@/app/components/common/SafeImage';

/**
 * 画像のプリロードを行うカスタムフック
 * @param url 画像のURL
 * @returns { loaded, error }
 */
const useImagePreload = (url?: string | null) => {
  const [loaded, setLoaded] = useState(false);
  const [error, setError] = useState(false);
  
  useEffect(() => {
    if (!url) return;
    
    const img = new window.Image();
    img.onload = () => {
      setLoaded(true);
      setError(false);
    };
    img.onerror = () => {
      setError(true);
      console.error('[Image Preload] Failed to load:', url);
    };
    img.src = url;
    
    return () => {
      img.onload = null;
      img.onerror = null;
    };
  }, [url]);
  
  return { loaded, error };
};

interface MessageBubbleProps {
  message: Message;
  isMine: boolean;
  showAvatar?: boolean;
  senderName?: string;
  senderAvatar?: string;
  onReactionAdd?: (messageId: string, reactionType: string) => void;
  onReply?: (messageId: string) => void;
  onDelete?: (messageId: string) => void;
}

export default function MessageBubble({
  message,
  isMine,
  showAvatar = true,
  senderName,
  senderAvatar,
  onReactionAdd,
  onReply,
  onDelete,
}: MessageBubbleProps) {
  const [showOptions, setShowOptions] = useState(false);
  
  // 添付ファイルの表示
  const renderAttachments = () => {
    if (!message.attachments || message.attachments.length === 0) return null;

    return (
      <div className="space-y-2 mt-2">
        {message.attachments.map((attachment) => {
          switch (attachment.type) {
            case 'image':
              // 画像URLの安全性チェック - 完全に無効な値は除外
              const imageUrl = attachment.url && typeof attachment.url === 'string' && attachment.url.trim() !== '' 
                ? attachment.url 
                : null; // SafeImageは内部でnullを処理する
              
              return (
                <motion.div 
                  key={attachment.id || `image-${Math.random().toString(36).substring(2, 9)}`}
                  className="relative rounded-lg overflow-hidden"
                  style={{ maxWidth: '240px' }}
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <SafeImage
                    src={imageUrl && typeof imageUrl === 'string' && imageUrl.trim() !== '' ? imageUrl : null}
                    alt="添付画像"
                    width={240}
                    height={240}
                    className="object-cover"
                    style={{ 
                      maxHeight: '240px', 
                      width: attachment.width && attachment.height 
                        ? `${Math.min(240, attachment.width)}px` 
                        : 'auto'
                    }}
                    fallbackSrc="/images/placeholder.svg"
                  />
                  
                  {/* URLが安全でない場合のみ代替メッセージを表示 */}
                  {!attachment.url || typeof attachment.url !== 'string' || attachment.url.trim() === '' ? (
                    <div className="absolute inset-0 flex items-center justify-center bg-gray-200 bg-opacity-80 rounded-lg">
                      <span className="text-gray-700 px-3 py-1 bg-white rounded shadow-sm">画像が利用できません</span>
                    </div>
                  ) : null}
                </motion.div>
              );
            case 'gift':
              // エモジとギフト画像を併用した表示
              return (
                <motion.div 
                  key={attachment.id || `gift-${Math.random().toString(36).substring(2, 9)}`}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                  className={`gift-message relative p-4 rounded-lg ${isMine ? 'bg-primary-50' : 'bg-rose-50'} border-2 ${isMine ? 'border-primary-200' : 'border-rose-200'} overflow-hidden`}
                >
                  {/* デバッグ用ログ */}
                  {(() => {
                    // コンソールログを出力するが、レンダリングには影響しない
                    console.log('【MessageBubble】ギフト表示:', {
                      giftId: attachment.giftId,
                      giftName: attachment.giftName,
                      giftImageUrl: attachment.giftImageUrl,
                      message: attachment.message
                    });
                    // nullを返してレンダリングに影響しないようにする
                    return null;
                  })()}
                  
                  <div className="flex items-center mb-2">
                    <motion.div 
                      className="mr-3 bg-white rounded-full p-1.5 shadow-sm relative"
                      initial={{ scale: 0.9 }}
                      animate={{ scale: 1 }}
                      transition={{ duration: 0.5 }}
                    >
                      {/* ギフト画像がある場合は表示、ない場合はエモジを表示 */}
                      {attachment.giftImageUrl && typeof attachment.giftImageUrl === 'string' && attachment.giftImageUrl.trim() !== '' ? (
                        <div className="w-12 h-12 relative gift-image-container">
                          <img
                            src={attachment.giftImageUrl}
                            alt={typeof attachment.giftName === 'string' ? attachment.giftName : 'ギフト'}
                            width={48}
                            height={48}
                            className="object-contain"
                            loading="eager"
                            onError={(e) => {
                              console.error('[ギフト画像] 読み込みエラー:', e);
                              // エラー時は要素を非表示にし、親要素にエモジ表示を追加
                              e.currentTarget.style.display = 'none';
                              
                              // エモジ要素を作成
                              const giftId = typeof attachment.giftId === 'string' ? attachment.giftId : '';
                              let emoji = '🎁'; // デフォルトはプレゼント
                              switch(giftId) {
                                case '1': emoji = '❤️'; break;
                                case '2': emoji = '💐'; break;
                                case '3': emoji = '🎂'; break;
                                case '4': emoji = '🍽️'; break;
                                case '5': emoji = '🍷'; break;
                              }
                              
                              // フォールバック表示
                              const container = e.currentTarget.closest('.gift-image-container');
                              if (container) {
                                const fallback = document.createElement('div');
                                fallback.className = 'text-4xl flex items-center justify-center w-full h-full';
                                fallback.textContent = emoji;
                                container.appendChild(fallback);
                              }
                            }}
                          />
                        </div>
                      ) : (
                        <div className="w-12 h-12 flex items-center justify-center">
                          <div className="text-4xl">
                            {(() => {
                              // エモジ表示
                              const giftId = typeof attachment.giftId === 'string' ? attachment.giftId : '';
                              switch(giftId) {
                                case '1': return '❤️';
                                case '2': return '💐';
                                case '3': return '🎂';
                                case '4': return '🍽️';
                                case '5': return '🍷';
                                default: return '🎁';
                              }
                            })()}
                          </div>
                        </div>
                      )}
                    </motion.div>
                    <div>
                      <div className="text-sm font-bold text-gray-800">
                        ギフトを送信しました
                      </div>
                      <div className="text-sm font-medium text-gray-700">
                        {typeof attachment.giftName === 'string' && attachment.giftName ? attachment.giftName : 'ギフト'}
                        {typeof attachment.price === 'number' && (
                          <span className="text-xs ml-1 text-gray-500">{attachment.price}pt</span>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  <motion.div 
                    className="text-sm px-2 py-1.5 bg-white rounded mt-2 text-gray-700"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.2, duration: 0.3 }}
                  >
                    {typeof attachment.message === 'string' && attachment.message ? (
                      <>メッセージ: {attachment.message}</>
                    ) : (
                      <>お引き立てありがとうございます</>
                    )}
                  </motion.div>
                  
                  {/* アニメーションが指定されている場合は表示 */}
                  {typeof attachment.animation === 'string' && attachment.animation && (
                    <motion.div 
                      className={`gift-animation ${attachment.animation} absolute top-0 left-0 w-full h-full pointer-events-none`}
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.3, duration: 0.5 }}
                    />
                  )}
                </motion.div>
              );
            case 'video':
              // 無効なURLをチェック
              const validVideoUrl = attachment.url && typeof attachment.url === 'string' && attachment.url.trim() !== ''
                ? attachment.url : null;
                
              // poster画像も安全性チェック
              const validPoster = attachment.thumbnailUrl && typeof attachment.thumbnailUrl === 'string' && 
                attachment.thumbnailUrl.trim() !== '' ? attachment.thumbnailUrl : null;
                
              return (
                <motion.div 
                  key={attachment.id || `video-${Math.random().toString(36).substring(2, 9)}`} 
                  className="relative rounded-lg overflow-hidden"
                  initial={{ opacity: 0, scale: 0.98 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.3 }}
                >
                  {validVideoUrl ? (
                    <video 
                      src={validVideoUrl} 
                      controls 
                      poster={validPoster || undefined}
                      className="max-w-[240px] max-h-[240px] rounded-lg"
                    />
                  ) : (
                    <div className="flex items-center justify-center bg-gray-100 w-[240px] h-[180px] rounded-lg">
                      <span className="text-gray-500 text-sm">動画を読み込めません</span>
                    </div>
                  )}
                </motion.div>
              );
            case 'location':
              // 位置情報の表示
              return (
                <motion.div 
                  key={attachment.id || `location-${Math.random().toString(36).substring(2, 9)}`} 
                  className="rounded-lg overflow-hidden bg-gray-100 p-2"
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="text-xs text-gray-500 mb-1">{attachment.name || '位置情報'}</div>
                  <div className="relative h-[120px] w-[200px]">
                    {attachment.latitude && attachment.longitude ? (
                      <>
                        {(() => {
                          // 地図画像のURL準備
                          const mapScale = 2; // レティナディスプレイ用に画像解像度を上げる
                          // 注意: 本番環境では環境変数を使用する必要があります
                          const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || 'AIzaSyBVZdKBMyVZVXYKLHO-gYkrVG-P8gvIzIM';
                          const mapUrl = `https://maps.googleapis.com/maps/api/staticmap?center=${attachment.latitude},${attachment.longitude}&zoom=14&size=400x240&scale=${mapScale}&markers=color:red%7C${attachment.latitude},${attachment.longitude}&key=${apiKey}`;
                          
                          // 地図画像を読み込む
                          return (
                            <img
                              src={mapUrl} 
                              alt={`${attachment.name || '位置情報'} の地図`}
                              width={200}
                              height={120}
                              className="rounded-lg object-cover w-full h-full"
                              loading="eager" // 優先ロード
                              onError={(e) => {
                                console.error('[位置情報] 地図読み込みエラー:', e);
                                // エラー時はフォールバック表示
                                e.currentTarget.style.display = 'none';
                                // エラーメッセージを表示する要素を表示
                                const fallbackEl = e.currentTarget.parentElement?.querySelector('.map-fallback') as HTMLElement | null;
                                if (fallbackEl) fallbackEl.style.display = 'flex';
                              }}
                            />
                          );
                        })()}
                        {/* フォールバック表示要素 (初期状態では非表示) */}
                        <div className="map-fallback hidden absolute inset-0 items-center justify-center bg-gray-200 rounded-lg">
                          <span className="text-sm text-gray-600">地図を読み込めません</span>
                        </div>
                      </>
                    ) : (
                      <div className="w-full h-full flex items-center justify-center bg-gray-200 rounded-lg">
                        <span className="text-gray-500 text-xs">地図の読み込みに失敗しました</span>
                      </div>
                    )}
                  </div>
                  <div className="text-xs text-gray-500 mt-1">{attachment.address}</div>
                </motion.div>
              );
            case 'url':
              return (
                <motion.div 
                  key={attachment.id || `url-${Math.random().toString(36).substring(2, 9)}`}
                  className="flex rounded-lg overflow-hidden border border-gray-200 shadow-sm bg-white"
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  {attachment.imageUrl && (
                    <div className="relative w-20 h-20 flex-shrink-0">
                      <SafeImage
                        src={attachment.imageUrl && typeof attachment.imageUrl === 'string' && attachment.imageUrl.trim() !== '' ? 
                          attachment.imageUrl : null}
                        alt={attachment.title || ''}
                        fill
                        className="object-cover"
                      />
                    </div>
                  )}
                  <div className="p-2 flex-1 min-w-0">
                    <div className="text-sm font-medium truncate">{attachment.title}</div>
                    <div className="text-xs text-gray-500 truncate">{attachment.description}</div>
                    <div className="text-xs text-blue-500 truncate">{attachment.url}</div>
                  </div>
                </motion.div>
              );
            case 'sticker':
              return (
                <motion.div 
                  key={attachment.id || `sticker-${Math.random().toString(36).substring(2, 9)}`}
                  className="relative w-[120px] h-[120px]"
                  initial={{ opacity: 0, scale: 0.95 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.3, type: "spring" }}
                >
                  {attachment.stickerId ? (
                    <SafeImage
                      src={attachment.stickerId ? 
                        `/stickers/${attachment.packageId || 'default'}/${attachment.stickerId}.png` : 
                        null}
                      alt="スタンプ"
                      fill
                      className="object-contain"
                      fallbackSrc="/images/placeholder.svg"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center bg-gray-200 rounded-lg">
                      <span className="text-gray-500 text-xs">スタンプが利用できません</span>
                    </div>
                  )}
                </motion.div>
              );
            default:
              return null;
          }
        })}
      </div>
    );
  };

  // メッセージステータスアイコンの表示
  const renderStatusIcon = () => {
    if (!isMine) return null;

    switch (message.status) {
      case 'sending':
        return <div className="w-1.5 h-1.5 bg-gray-300 rounded-full mr-0.5 animate-pulse" />;
      case 'sent':
        return <FaCheck className="text-gray-400 text-[10px] mr-0.5" />;
      case 'delivered':
        return <FaCheckDouble className="text-gray-400 text-[10px] mr-0.5" />;
      case 'read':
        return (
          <span className="text-[10px] text-primary-400 mr-0.5 font-medium select-none">既読</span>
        );
      case 'failed':
        return <span className="text-error-300 text-[10px] mr-0.5">!</span>;
      default:
        return null;
    }
  };

  // リアクションの表示
  const renderReactions = () => {
    if (!message.reactions || message.reactions.length === 0) return null;

    // リアクションタイプごとにカウント
    const reactionCounts: Record<string, number> = {};
    message.reactions.forEach((reaction) => {
      reactionCounts[reaction.type] = (reactionCounts[reaction.type] || 0) + 1;
    });

    return (
      <div className={`flex mt-1 ${isMine ? 'justify-end' : 'justify-start'}`}>
        <div className="flex items-center space-x-1 bg-white rounded-full px-2 py-0.5 shadow-sm border border-gray-100">
          {Object.entries(reactionCounts).map(([type, count]) => (
            <div key={type} className="flex items-center">
              {type === 'like' && <HiHeart className="text-pink-500 w-3 h-3" />}
              {/* 他のリアクションタイプもここに追加 */}
              <span className="text-xs text-gray-600 ml-0.5 select-none">{count}</span>
            </div>
          ))}
        </div>
      </div>
    );
  };

  // フォーマットされた時間
  // LINEスタイルの簡潔な時間表示
  const formatMessageTime = (date: Date): string => {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    const isToday = date >= today;
    const isYesterday = date >= yesterday && date < today;
    
    const hours = date.getHours();
    const minutes = date.getMinutes();
    const ampm = hours >= 12 ? '午後' : '午前';
    const hour12 = hours % 12 || 12;
    
    if (isToday) {
      return `${ampm}${hour12}:${minutes.toString().padStart(2, '0')}`;
    } else if (isYesterday) {
      return `昨日 ${ampm}${hour12}:${minutes.toString().padStart(2, '0')}`;
    } else {
      return `${date.getMonth() + 1}/${date.getDate()} ${ampm}${hour12}:${minutes.toString().padStart(2, '0')}`;
    }
  };
  
  const formattedTime = formatMessageTime(message.createdAt);

  return (
    <motion.div 
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.2 }}
      className={`flex ${isMine ? 'mb-3' : 'mb-3'} ${isMine ? 'justify-end' : 'justify-start'} relative group`}
    >
      {!isMine && showAvatar && (
        <div className="mr-2 flex-shrink-0">
          <div className="relative w-8 h-8 rounded-full overflow-hidden">
            {senderAvatar && typeof senderAvatar === 'string' && senderAvatar.trim() !== '' ? (
              <AvatarImage
                src={senderAvatar}
                alt={senderName || ''}
                fill
                className="object-cover"
              />
            ) : (
              <div className="w-full h-full bg-gray-300 flex items-center justify-center text-white">
                {senderName ? senderName.charAt(0).toUpperCase() : '?'}
              </div>
            )}
          </div>
        </div>
      )}

      <div className={`${isMine ? 'order-1 mr-1.5' : 'order-2'}`} style={{ maxWidth: 'calc(85% - 24px)' }}>
        {!isMine && senderName && (
          <div className="text-xs text-gray-500 mb-1 ml-1">{senderName}</div>
        )}

        <div 
          className="relative group"
          onMouseEnter={() => setShowOptions(true)}
          onMouseLeave={() => setShowOptions(false)}
        >
          <div
            className={`px-3 py-2.5 break-words ${
              isMine
                ? 'bg-primary-300 text-white rounded-2xl rounded-br-none shadow-sm transition-all duration-150 group-hover:bg-primary-400'
                : 'bg-gray-100 text-gray-800 rounded-2xl rounded-bl-none transition-all duration-150 group-hover:bg-gray-200'
            }`}
            style={{
              maxWidth: '85vw'
            }}
          >
            {message.isDeleted ? (
              <span className="italic text-xs opacity-60">
                {isMine ? 'このメッセージは削除されました' : 'メッセージは削除されました'}
              </span>
            ) : (
              <>
                {message.content && <div className="text-sm leading-relaxed whitespace-pre-wrap">{message.content}</div>}
                {renderAttachments()}
              </>
            )}
          </div>

          {showOptions && !message.isDeleted && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 10 }}
              className={`absolute ${isMine ? 'right-0' : 'left-0'} -top-8 flex items-center space-x-1 bg-white rounded-full shadow-md px-1 py-1 z-10`}
            >
              <button
                onClick={() => onReactionAdd?.(message.id, 'like')}
                className="p-1.5 hover:bg-gray-100 rounded-full text-gray-600 hover:text-pink-500 transition-colors"
              >
                <HiOutlineHeart className="w-4 h-4" />
              </button>
              <button
                onClick={() => onReply?.(message.id)}
                className="p-1.5 hover:bg-gray-100 rounded-full text-gray-600 hover:text-primary-500 transition-colors"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6" />
                </svg>
              </button>
              {isMine && (
                <button
                  onClick={() => onDelete?.(message.id)}
                  className="p-1.5 hover:bg-gray-100 rounded-full text-gray-600 hover:text-red-500 transition-colors"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              )}
            </motion.div>
          )}

          <div className={`flex items-center mt-0.5 text-[10px] text-gray-400 select-none ${isMine ? 'justify-end pr-1' : 'justify-start pl-1'}`}>
            {isMine && renderStatusIcon()}
            <span>{formattedTime}</span>
          </div>

          {renderReactions()}
        </div>
      </div>
    </motion.div>
  );
}
 {
  const [showOptions, setShowOptions] = useState(false);
  
  // 添付ファイルの表示
  const renderAttachments = () => {
    if (!message.attachments || message.attachments.length === 0) return null;

    return (
      <div className="space-y-2 mt-2">
        {message.attachments.map((attachment) => {
          switch (attachment.type) {
            case 'image':
              // 画像URLの安全性チェック - 完全に無効な値は除外
              const imageUrl = attachment.url && typeof attachment.url === 'string' && attachment.url.trim() !== '' 
                ? attachment.url 
                : null; // SafeImageは内部でnullを処理する
              
              return (
                <motion.div 
                  key={attachment.id || `image-${Math.random().toString(36).substring(2, 9)}`}
                  className="relative rounded-lg overflow-hidden"
                  style={{ maxWidth: '240px' }}
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <SafeImage
                    src={imageUrl && typeof imageUrl === 'string' && imageUrl.trim() !== '' ? imageUrl : null}
                    alt="添付画像"
                    width={240}
                    height={240}
                    className="object-cover"
                    style={{ 
                      maxHeight: '240px', 
                      width: attachment.width && attachment.height 
                        ? `${Math.min(240, attachment.width)}px` 
                        : 'auto'
                    }}
                    fallbackSrc="/images/placeholder.svg"
                  />
                  
                  {/* URLが安全でない場合のみ代替メッセージを表示 */}
                  {!attachment.url || typeof attachment.url !== 'string' || attachment.url.trim() === '' ? (
                    <div className="absolute inset-0 flex items-center justify-center bg-gray-200 bg-opacity-80 rounded-lg">
                      <span className="text-gray-700 px-3 py-1 bg-white rounded shadow-sm">画像が利用できません</span>
                    </div>
                  ) : null}
                </motion.div>
              );
            case 'gift':
              // エモジとギフト画像を併用した表示
              return (
                <motion.div 
                  key={attachment.id || `gift-${Math.random().toString(36).substring(2, 9)}`}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                  className={`gift-message relative p-4 rounded-lg ${isMine ? 'bg-primary-50' : 'bg-rose-50'} border-2 ${isMine ? 'border-primary-200' : 'border-rose-200'} overflow-hidden`}
                >
                  {/* デバッグ用ログ - コンポーネントのレンダリング時に実行される */}
                  
                  <div className="flex items-center mb-2">
                    <motion.div 
                      className="mr-3 bg-white rounded-full p-1.5 shadow-sm relative"
                      initial={{ scale: 0.9 }}
                      animate={{ scale: 1 }}
                      transition={{ duration: 0.5 }}
                    >}
                  
                  <div className="flex items-center mb-2">
                    <motion.div 
                      className="mr-3 bg-white rounded-full p-1.5 shadow-sm relative"
                      initial={{ scale: 0.9 }}
                      animate={{ scale: 1 }}
                      transition={{ duration: 0.5 }}
                    >
                      {/* ギフト画像がある場合は表示、ない場合はエモジを表示 */}
                      {attachment.giftImageUrl && typeof attachment.giftImageUrl === 'string' && attachment.giftImageUrl.trim() !== '' ? (
                        <div className="w-12 h-12 relative gift-image-container">
                          <img
                            src={attachment.giftImageUrl}
                            alt={typeof attachment.giftName === 'string' ? attachment.giftName : 'ギフト'}
                            width={48}
                            height={48}
                            className="object-contain"
                            loading="eager"
                            onError={(e) => {
                              console.error('[ギフト画像] 読み込みエラー:', e);
                              // エラー時は要素を非表示にし、親要素にエモジ表示を追加
                              e.currentTarget.style.display = 'none';
                              
                              // エモジ要素を作成
                              const giftId = typeof attachment.giftId === 'string' ? attachment.giftId : '';
                              let emoji = '🎁'; // デフォルトはプレゼント
                              switch(giftId) {
                                case '1': emoji = '❤️'; break;
                                case '2': emoji = '💐'; break;
                                case '3': emoji = '🎂'; break;
                                case '4': emoji = '🍽️'; break;
                                case '5': emoji = '🍷'; break;
                              }
                              
                              // エラー時のフォールバック表示
                              const container = e.currentTarget.closest('.gift-image-container');
                              if (container) {
                                const fallback = document.createElement('div');
                                fallback.className = 'text-4xl flex items-center justify-center w-full h-full';
                                fallback.textContent = emoji;
                                container.appendChild(fallback);
                              }
                            }}
                          />
                        </div>
                      ) : (
                            />
                          </div>
                        )
                      })()
                        <div className="w-12 h-12 flex items-center justify-center">
                          <div className="text-4xl">
                            {(() => {
                              // エモジ表示
                              const giftId = typeof attachment.giftId === 'string' ? attachment.giftId : '';
                              switch(giftId) {
                                case '1': return '❤️';
                                case '2': return '💐';
                                case '3': return '🎂';
                                case '4': return '🍽️';
                                case '5': return '🍷';
                                default: return '🎁';
                              }
                            })()}
                          </div>
                        </div>
                      )}
                    </motion.div>
                    <div>
                      <div className="text-sm font-bold text-gray-800">
                        ギフトを送信しました
                      </div>
                      <div className="text-sm font-medium text-gray-700">
                        {typeof attachment.giftName === 'string' && attachment.giftName ? attachment.giftName : 'ギフト'}
                        {typeof attachment.price === 'number' && (
                          <span className="text-xs ml-1 text-gray-500">{attachment.price}pt</span>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  <motion.div 
                    className="text-sm px-2 py-1.5 bg-white rounded mt-2 text-gray-700"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.2, duration: 0.3 }}
                  >
                    {typeof attachment.message === 'string' && attachment.message ? (
                      <>メッセージ: {attachment.message}</>
                    ) : (
                      <>お引き立てありがとうございます</>
                    )}
                  </motion.div>
                  
                  {/* アニメーションが指定されている場合は表示 */}
                  {attachment.animation && (
                    <div className={`gift-animation absolute inset-0 pointer-events-none ${attachment.animation}`}>
                      {/* アニメーション要素を追加 */}
                    </div>
                  )}
                  
                  {typeof attachment.animation === 'string' && attachment.animation && (
                    <motion.div 
                      className={`gift-animation ${attachment.animation} absolute top-0 left-0 w-full h-full pointer-events-none`}
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.3, duration: 0.5 }}
                    />
                  )}
                </motion.div>
              );
            case 'video':
              // 無効なURLをチェック
              const validVideoUrl = attachment.url && typeof attachment.url === 'string' && attachment.url.trim() !== ''
                ? attachment.url : null;
                
              // poster画像も安全性チェック
              const validPoster = attachment.thumbnailUrl && typeof attachment.thumbnailUrl === 'string' && 
                attachment.thumbnailUrl.trim() !== '' ? attachment.thumbnailUrl : null;
                
              return (
                <motion.div 
                  key={attachment.id || `video-${Math.random().toString(36).substring(2, 9)}`} 
                  className="relative rounded-lg overflow-hidden"
                  initial={{ opacity: 0, scale: 0.98 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.3 }}
                >
                  {validVideoUrl ? (
                    <video 
                      src={validVideoUrl} 
                      controls 
                      poster={validPoster || undefined}
                      className="max-w-[240px] max-h-[240px] rounded-lg"
                    />
                  ) : (
                    <div className="flex items-center justify-center bg-gray-100 w-[240px] h-[180px] rounded-lg">
                      <span className="text-gray-500 text-sm">動画を読み込めません</span>
                    </div>
                  )}
                </motion.div>
              );
            case 'location':
              return (
                <motion.div 
                  key={attachment.id || `location-${Math.random().toString(36).substring(2, 9)}`} 
                  className="rounded-lg overflow-hidden bg-gray-100 p-2"
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="text-xs text-gray-500 mb-1">{attachment.name || '位置情報'}</div>
                  <div className="relative h-[120px] w-[200px]">
                    {attachment.latitude && attachment.longitude ? (
                      <>
                        {/* 静的な地図画像を生成 */}
                        {(() => {
                          // 地図画像のURL準備
                          const mapScale = 2; // レティナディスプレイ用に画像解像度を上げる
                          const mapUrl = `https://maps.googleapis.com/maps/api/staticmap?center=${attachment.latitude},${attachment.longitude}&zoom=14&size=400x240&scale=${mapScale}&markers=color:red%7C${attachment.latitude},${attachment.longitude}&key=AIzaSyBVZdKBMyVZVXYKLHO-gYkrVG-P8gvIzIM`;
                          
                          // プリロード機能を利用
                          const { error: preloadError } = useImagePreload(mapUrl);
                          
                          console.log('[位置情報] 地図読み込みステータス:', { url: mapUrl, preloadError });
                          
                          // プリロード機能の結果をコンソールに表示
                          console.log('[位置情報] 地図読み込みステータス:', { url: mapUrl, preloadError });
                          
                          // プリロードで既にエラーが発生している場合はフォールバック表示
                          if (preloadError) {
                            return (
                              <div className="w-full h-full flex items-center justify-center bg-gray-200 rounded-lg">
                                <span className="text-gray-500 text-xs">地図の読み込みに失敗しました</span>
                              </div>
                            );
                          }
                          
                          return (
                            <img
                              src={mapUrl} 
                              alt={`${attachment.name || '位置情報'} の地図`}
                              width={200}
                              height={120}
                              className="rounded-lg object-cover w-full h-full"
                              loading="eager" // 優先ロード
                              onError={(e) => {
                                console.error('[位置情報] 地図読み込みエラー:', e);
                                // エラー時はフォールバック表示
                                e.currentTarget.style.display = 'none';
                                // エラーメッセージを表示する要素を表示
                                const fallbackEl = e.currentTarget.parentElement?.querySelector('.map-fallback') as HTMLElement | null;
                                if (fallbackEl) fallbackEl.style.display = 'flex';
                              }}
                            />
                          );
                        })()}
                        {/* フォールバック表示要素 (初期状態では非表示) */}
                        <div className="map-fallback hidden absolute inset-0 items-center justify-center bg-gray-200 rounded-lg">
                          <span className="text-sm text-gray-600">地図を読み込めません</span>
                        </div>
                      </>
                    ) : (
                      <div className="w-full h-full flex items-center justify-center bg-gray-200 rounded-lg">
                        <span className="text-gray-500 text-xs">地図の読み込みに失敗しました</span>
                      </div>
                    )}
                  </div>
                  <div className="text-xs text-gray-500 mt-1">{attachment.address}</div>
                </motion.div>
              );
            case 'url':
              return (
                <motion.div 
                  key={attachment.id || `url-${Math.random().toString(36).substring(2, 9)}`}
                  className="flex rounded-lg overflow-hidden border border-gray-200 shadow-sm bg-white"
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  {attachment.imageUrl && (
                    <div className="relative w-20 h-20 flex-shrink-0">
                      <SafeImage
                        src={attachment.imageUrl && typeof attachment.imageUrl === 'string' && attachment.imageUrl.trim() !== '' ? 
                          attachment.imageUrl : null}
                        alt={attachment.title || ''}
                        fill
                        className="object-cover"
                      />
                    </div>
                  )}
                  <div className="p-2 flex-1 min-w-0">
                    <div className="text-sm font-medium truncate">{attachment.title}</div>
                    <div className="text-xs text-gray-500 truncate">{attachment.description}</div>
                    <div className="text-xs text-blue-500 truncate">{attachment.url}</div>
                  </div>
                </motion.div>
              );
            case 'sticker':
              return (
                <motion.div 
                  key={attachment.id || `sticker-${Math.random().toString(36).substring(2, 9)}`}
                  className="relative w-[120px] h-[120px]"
                  initial={{ opacity: 0, scale: 0.95 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.3, type: "spring" }}
                >
                  {attachment.stickerId ? (
                    <SafeImage
                      src={attachment.stickerId ? 
                        `/stickers/${attachment.packageId || 'default'}/${attachment.stickerId}.png` : 
                        null}
                      alt="スタンプ"
                      fill
                      className="object-contain"
                      fallbackSrc="/images/placeholder.svg"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center bg-gray-200 rounded-lg">
                      <span className="text-gray-500 text-xs">スタンプが利用できません</span>
                    </div>
                  )}
                </motion.div>
              );
            default:
              return null;
          }
        })}
      </div>
    );
  };

  // メッセージステータスアイコンの表示
  const renderStatusIcon = () => {
    if (!isMine) return null;

    switch (message.status) {
      case 'sending':
        return <div className="w-1.5 h-1.5 bg-gray-300 rounded-full mr-0.5 animate-pulse" />;
      case 'sent':
        return <FaCheck className="text-gray-400 text-[10px] mr-0.5" />;
      case 'delivered':
        return <FaCheckDouble className="text-gray-400 text-[10px] mr-0.5" />;
      case 'read':
        return (
          <span className="text-[10px] text-primary-400 mr-0.5 font-medium select-none">既読</span>
        );
      case 'failed':
        return <span className="text-error-300 text-[10px] mr-0.5">!</span>;
      default:
        return null;
    }
  };

  // リアクションの表示
  const renderReactions = () => {
    if (!message.reactions || message.reactions.length === 0) return null;

    // リアクションタイプごとにカウント
    const reactionCounts: Record<string, number> = {};
    message.reactions.forEach((reaction) => {
      reactionCounts[reaction.type] = (reactionCounts[reaction.type] || 0) + 1;
    });

    return (
      <div className={`flex mt-1 ${isMine ? 'justify-end' : 'justify-start'}`}>
        <div className="flex items-center space-x-1 bg-white rounded-full px-2 py-0.5 shadow-sm border border-gray-100">
          {Object.entries(reactionCounts).map(([type, count]) => (
            <div key={type} className="flex items-center">
              {type === 'like' && <HiHeart className="text-pink-500 w-3 h-3" />}
              {/* 他のリアクションタイプもここに追加 */}
              <span className="text-xs text-gray-600 ml-0.5 select-none">{count}</span>
            </div>
          ))}
        </div>
      </div>
    );
  };

  // フォーマットされた時間
  // LINEスタイルの簡潔な時間表示
  const formatMessageTime = (date: Date): string => {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    const isToday = date >= today;
    const isYesterday = date >= yesterday && date < today;
    
    const hours = date.getHours();
    const minutes = date.getMinutes();
    const ampm = hours >= 12 ? '午後' : '午前';
    const hour12 = hours % 12 || 12;
    
    if (isToday) {
      return `${ampm}${hour12}:${minutes.toString().padStart(2, '0')}`;
    } else if (isYesterday) {
      return `昨日 ${ampm}${hour12}:${minutes.toString().padStart(2, '0')}`;
    } else {
      return `${date.getMonth() + 1}/${date.getDate()} ${ampm}${hour12}:${minutes.toString().padStart(2, '0')}`;
    }
  };
  
  const formattedTime = formatMessageTime(message.createdAt);

  return (
    <motion.div 
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.2 }}
      className={`flex ${isMine ? 'mb-3' : 'mb-3'} ${isMine ? 'justify-end' : 'justify-start'} relative group`}
    >
      {!isMine && showAvatar && (
        <div className="mr-2 flex-shrink-0">
          <div className="relative w-8 h-8 rounded-full overflow-hidden">
            {senderAvatar && typeof senderAvatar === 'string' && senderAvatar.trim() !== '' ? (
              <AvatarImage
                src={senderAvatar}
                alt={senderName || ''}
                fill
                className="object-cover"
              />
            ) : (
              <div className="w-full h-full bg-gray-300 flex items-center justify-center text-white">
                {senderName ? senderName.charAt(0).toUpperCase() : '?'}
              </div>
            )}
          </div>
        </div>
      )}

      <div className={`${isMine ? 'order-1 mr-1.5' : 'order-2'}`} style={{ maxWidth: 'calc(85% - 24px)' }}>
        {!isMine && senderName && (
          <div className="text-xs text-gray-500 mb-1 ml-1">{senderName}</div>
        )}

        <div 
          className="relative group"
          onMouseEnter={() => setShowOptions(true)}
          onMouseLeave={() => setShowOptions(false)}
        >
          <div
            className={`px-3 py-2.5 break-words ${
              isMine
                ? 'bg-primary-300 text-white rounded-2xl rounded-br-none shadow-sm transition-all duration-150 group-hover:bg-primary-400'
                : 'bg-gray-100 text-gray-800 rounded-2xl rounded-bl-none transition-all duration-150 group-hover:bg-gray-200'
            }`}
            style={{
              maxWidth: '85vw'
            }}
          >
            {message.isDeleted ? (
              <span className="italic text-xs opacity-60">
                {isMine ? 'このメッセージは削除されました' : 'メッセージは削除されました'}
              </span>
            ) : (
              <>
                {message.content && <div className="text-sm leading-relaxed whitespace-pre-wrap">{message.content}</div>}
                {renderAttachments()}
              </>
            )}
          </div>

          {showOptions && !message.isDeleted && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 10 }}
              className={`absolute ${isMine ? 'right-0' : 'left-0'} -top-8 flex items-center space-x-1 bg-white rounded-full shadow-md px-1 py-1 z-10`}
            >
              <button
                onClick={() => onReactionAdd?.(message.id, 'like')}
                className="p-1.5 hover:bg-gray-100 rounded-full text-gray-600 hover:text-pink-500 transition-colors"
              >
                <HiOutlineHeart className="w-4 h-4" />
              </button>
              <button
                onClick={() => onReply?.(message.id)}
                className="p-1.5 hover:bg-gray-100 rounded-full text-gray-600 hover:text-primary-500 transition-colors"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6" />
                </svg>
              </button>
              {isMine && (
                <button
                  onClick={() => onDelete?.(message.id)}
                  className="p-1.5 hover:bg-gray-100 rounded-full text-gray-600 hover:text-red-500 transition-colors"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              )}
            </motion.div>
          )}

          <div className={`flex items-center mt-0.5 text-[10px] text-gray-400 select-none ${isMine ? 'justify-end pr-1' : 'justify-start pl-1'}`}>
            {isMine && renderStatusIcon()}
            <span>{formattedTime}</span>
          </div>

          {renderReactions()}
        </div>
      </div>
    </motion.div>
  );
}
