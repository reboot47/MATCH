generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?
  bio              String?
  age              Int?
  gender           String?
  location         String?
  occupation       String?
  company          String?
  education        String?
  height           Int?
  drinking         String?
  smoking          String?
  children         Int?
  interests        String[]
  personalityType  String?
  personalityTraits Json?
  personalityTestCompleted Boolean @default(false)
  appealProfile    Json?          // アピールプロフィール情報
  role             String         @default("USER")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  accounts         Account[]
  broadcasts       Broadcast[]    @relation("UserBroadcasts")
  likesSent        Like[]         @relation("LikeFromUser")
  likesReceived    Like[]         @relation("LikeToUser")
  messagesReceived Message[]      @relation("MessageToUser")
  messagesSent     Message[]      @relation("MessageFromUser")
  notifications    Notification[] 
  photos           Photo[]
  mediaItems       MediaItem[]    @relation("UserMedia")
  sessions         Session[]
  viewers          Viewer[]       @relation("UserViewers")
  matches          Match[]        @relation("UserMatches")
  reportsSent      Report[]       @relation("ReportFromUser")
  reportsReceived  Report[]       @relation("ReportToUser")
  privacy          UserPrivacy?   @relation("UserToPrivacy")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  isProfile Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MediaItem {
  id        String   @id @default(cuid())
  url       String
  type      String   // 'image' または 'video'
  publicId  String   // Cloudinaryの公開ID
  thumbnail String?  // 動画のサムネイル
  caption   String?
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserMedia", fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  isMatched Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fromUser  User     @relation("LikeFromUser", fields: [fromId], references: [id], onDelete: Cascade)
  toUser    User     @relation("LikeToUser", fields: [toId], references: [id], onDelete: Cascade)

  @@unique([fromId, toId])
}

model Match {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  users     User[]    @relation("UserMatches")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  imageUrl    String?
  read        Boolean  @default(false)
  isFlagged   Boolean  @default(false)
  isBlocked   Boolean  @default(false)
  blockReason String?
  matchId     String
  senderId    String
  receiverId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  match       Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  receiver    User     @relation("MessageToUser", fields: [receiverId], references: [id], onDelete: Cascade)
  sender      User     @relation("MessageFromUser", fields: [senderId], references: [id], onDelete: Cascade)
}

model Broadcast {
  id          String    @id @default(cuid())
  title       String
  description String?
  streamKey   String    @unique
  streamUrl   String
  isActive    Boolean   @default(false)
  startedAt   DateTime?
  endedAt     DateTime?
  hostId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  host        User      @relation("UserBroadcasts", fields: [hostId], references: [id], onDelete: Cascade)
  viewers     Viewer[]
}

model Viewer {
  id          String    @id @default(cuid())
  userId      String
  broadcastId String
  joinedAt    DateTime  @default(now())
  leftAt      DateTime?
  broadcast   Broadcast @relation(fields: [broadcastId], references: [id], onDelete: Cascade)
  user        User      @relation("UserViewers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, broadcastId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id           String   @id @default(cuid())
  type         String   // harassment, fake_profile, inappropriate_behavior, etc.
  description  String   // 報告の詳細説明
  status       String   @default("pending") // pending, investigating, resolved
  severity     String   @default("medium") // low, medium, high
  resolution   String?  // 解決策（警告、アカウント停止、無視など）
  evidenceUrls String[] // 証拠画像や証拠となるメッセージのID
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 報告者
  reporterId String
  reporter   User   @relation("ReportFromUser", fields: [reporterId], references: [id], onDelete: Cascade)

  // 報告対象者
  reportedId String
  reported   User   @relation("ReportToUser", fields: [reportedId], references: [id], onDelete: Cascade)
  
  // 関連付けられたコンテンツ
  contentId   String?
  contentType String? // profile, photo, message, livestream, etc.
  
  // モデレーション処理
  moderatorId       String?
  moderationComment String?
  moderatedAt       DateTime?
}

// コンテンツモデレーション記録
model ContentModeration {
  id               String   @id @default(cuid())
  contentType      String   // profile, photo, message, post, comment, etc.
  contentId        String   // 対象コンテンツのID
  userId           String   // コンテンツ所有者
  moderatorId      String?  // モデレーション実施者
  status           String   @default("pending") // pending, approved, rejected
  reason           String?  // モデレーション理由
  moderationNotes  String?  // 内部向けメモ
  violationLevel   String?  // minor, moderate, severe
  actionTaken      String?  // warning, content_removal, temporary_ban, permanent_ban
  detectionMethod  String   @default("user_report") // user_report, automated, routine_check
  createdAt        DateTime @default(now())
  moderatedAt      DateTime?
  updatedAt        DateTime @updatedAt
}

// モデレーションポリシー
model ModerationPolicy {
  id             String   @id @default(cuid())
  name           String
  description    String
  contentType    String   // profile, photo, message, etc.
  rules          String[] // ポリシーのルール
  severity       String   // low, medium, high
  actionRequired String   // warn, remove, ban
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// 自動応答テンプレート
model AutoResponseTemplate {
  id        String            @id @default(cuid())
  name      String
  message   String
  category  String
  isActive  Boolean           @default(true)
  useCount  Int               @default(0)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  rules     AutoResponseRule[] @relation("TemplateToRule")
}

// 自動応答ルール
model AutoResponseRule {
  id               String                @id @default(cuid())
  name             String
  conditionType    String
  conditionValue   String
  conditionOperator String?
  delay            Int                   @default(0)
  probability      Int                   @default(100)
  isActive         Boolean               @default(true)
  accountIds       String[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  templates        AutoResponseTemplate[] @relation("TemplateToRule")
}

model UserPrivacy {
  id                 String   @id @default(cuid())
  userId             String   @unique
  profileVisibility  String   @default("matches") // everyone, matches, verified
  messagingPreference String  @default("matches") // everyone, matches, verified
  locationSharing    String   @default("city")    // precise, city, region, none
  activityVisibility String   @default("matches") // everyone, matches, none
  dataUsage          String   @default("personalized") // personalized, limited, minimal
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation("UserToPrivacy", fields: [userId], references: [id], onDelete: Cascade)
}
