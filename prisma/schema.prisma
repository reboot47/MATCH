generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?
  bio              String?
  age              Int?
  gender           String?
  location         String?
  occupation       String?
  interests        String[]
  // role             String         @default("USER") // データベースにカラム不在のため一時的にコメントアウト
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  accounts         Account[]
  broadcasts       Broadcast[]    @relation("UserBroadcasts")
  likesSent        Like[]         @relation("LikeFromUser")
  likesReceived    Like[]         @relation("LikeToUser")
  messagesReceived Message[]      @relation("MessageToUser")
  messagesSent     Message[]      @relation("MessageFromUser")
  notifications    Notification[] @relation("UserNotifications")
  photos           Photo[]
  sessions         Session[]
  viewers          Viewer[]       @relation("UserViewers")
  matches          Match[]        @relation("UserMatches")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  isProfile Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  isMatched Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fromUser  User     @relation("LikeFromUser", fields: [fromId], references: [id], onDelete: Cascade)
  toUser    User     @relation("LikeToUser", fields: [toId], references: [id], onDelete: Cascade)

  @@unique([fromId, toId])
}

model Match {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  users     User[]    @relation("UserMatches")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  imageUrl    String?
  read        Boolean  @default(false)
  isFlagged   Boolean  @default(false)
  isBlocked   Boolean  @default(false)
  blockReason String?
  matchId     String
  senderId    String
  receiverId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  match       Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  receiver    User     @relation("MessageToUser", fields: [receiverId], references: [id], onDelete: Cascade)
  sender      User     @relation("MessageFromUser", fields: [senderId], references: [id], onDelete: Cascade)
}

model Broadcast {
  id          String    @id @default(cuid())
  title       String
  description String?
  streamKey   String    @unique
  streamUrl   String
  isActive    Boolean   @default(false)
  startedAt   DateTime?
  endedAt     DateTime?
  hostId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  host        User      @relation("UserBroadcasts", fields: [hostId], references: [id], onDelete: Cascade)
  viewers     Viewer[]
}

model Viewer {
  id          String    @id @default(cuid())
  userId      String
  broadcastId String
  joinedAt    DateTime  @default(now())
  leftAt      DateTime?
  broadcast   Broadcast @relation(fields: [broadcastId], references: [id], onDelete: Cascade)
  user        User      @relation("UserViewers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, broadcastId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  content   String
  read      Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}
